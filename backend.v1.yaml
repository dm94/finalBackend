openapi: 3.0.0
info:
  title: backend
  version: '1.0'
  description: API for the backend of the final project
  contact:
    name: Daniel
    url: 'https://github.com/dm94'
servers:
  - url: 'http://localhost:3000'
tags:
  - name: chat
  - name: users
  - name: products
  - name: token
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    patch:
      summary: Update User Information
      operationId: updateUser
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    firstName: string
                    lastName: string
                    email: user@example.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    createDate: '2019-08-24'
                    image: 'http://example.com'
                    location: string
                    lastConectionDate: '2019-08-24T14:15:22Z'
                    token: string
                    username: string
                    password: pa$$word
                    _id: sadd
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                  format: email
                dateOfBirth:
                  type: string
                  format: date
                image:
                  type: string
                  format: uri
                location:
                  type: string
            examples:
              Update public info:
                value:
                  firstName: Pepito
                  lastName: De los palotes
                  location: Talavera de la Reina
              Date of Birth:
                value:
                  dateOfBirth: '1985-10-02'
              Update Image:
                value:
                  image: 'https://dominio.com/imagen/dasda.jpg'
              Update Email:
                value:
                  email: newemail@hotmail.es
        description: Patch user properties to update.
      parameters: []
      tags:
        - users
      security:
        - token: []
    delete:
      summary: Delete User
      operationId: deleteUser
      responses:
        '200':
          description: OK
      description: Delete User
      parameters: []
      tags:
        - users
      security:
        - token: []
  /users:
    post:
      summary: Create New User
      operationId: addUser
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    firstName: string
                    lastName: string
                    email: user@example.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    createDate: '2019-08-24'
                    image: 'http://example.com'
                    location: string
                    lastConectionDate: '2019-08-24T14:15:22Z'
                    token: string
                    username: string
                    password: pa$$word
                    _id: sadfs
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                dateOfBirth:
                  type: string
                  format: date
                password:
                  type: string
                  minLength: 12
                username:
                  type: string
                  minLength: 5
              required:
                - email
                - dateOfBirth
                - password
                - username
            examples:
              Create User Bob Fellow:
                value:
                  username: pepito
                  password: asdasasdasddad
                  email: pepito@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      tags:
        - users
      parameters: []
    parameters: []
    get:
      summary: ''
      operationId: getUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
      description: Retrieve the information of the user
      tags:
        - users
  '/users/{userId}/profile':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get Profile
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  userID:
                    type: integer
                  firstName:
                    type: string
                  location:
                    type: string
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
      operationId: getUserProfile
      description: Returns the user profile
  /products:
    post:
      summary: Add products
      operationId: addProduct
      responses:
        '201':
          description: Created
      description: Create a product
      parameters:
        - schema:
            type: string
          in: query
          name: idSeller
          description: Id of an existing user.
          required: true
        - schema:
            type: string
          in: query
          name: tokenSeller
          description: Token generated to access
          required: true
        - schema:
            type: string
          in: query
          name: name
          description: Product name
          required: true
        - schema:
            type: number
          in: query
          name: price
          required: true
          description: Product price
        - schema:
            type: string
            enum:
              - plant
              - insect
          in: query
          name: type
          description: Product Type
          required: true
        - schema:
            type: string
          in: query
          name: image
          description: Product Image
        - schema:
            type: string
          in: query
          name: description
          description: Product Description
        - schema:
            type: string
          in: query
          name: specie
          description: Product Specie
        - schema:
            type: string
          in: query
          name: size
          description: Product Size
        - schema:
            type: boolean
          in: query
          name: egg
          description: True if is egg or seed
      tags:
        - products
      security:
        - token: []
    get:
      summary: Get Products
      operationId: getProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      description: 'Returns a list of products. Max: 10 products'
      parameters:
        - schema:
            type: string
            enum:
              - insect
              - plant
          in: query
          name: type
          description: Product Type
          required: true
        - schema:
            type: integer
          in: query
          name: pag
          description: Products page
      tags:
        - products
  '/products/{productID}':
    parameters:
      - schema:
          type: string
        name: productID
        in: path
        required: true
        description: Product ID
    get:
      summary: Get Product
      tags:
        - products
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      operationId: getProduct
      description: Returns a product
    patch:
      summary: Update Product
      operationId: updateProduct
      responses:
        '202':
          description: Accepted
      parameters:
        - schema:
            type: string
          in: query
          name: User token
          description: Generated access token
      description: Allows product data to be updated
      tags:
        - products
      security:
        - token: []
    delete:
      summary: Delete Product
      operationId: deleteProduct
      responses:
        '204':
          description: No Content
      description: Allows the deletion of a product
      parameters:
        - schema:
            type: string
          in: query
          name: token
          description: Generated access token
      tags:
        - products
      security:
        - token: []
  '/users/{userId}/chats':
    get:
      summary: Get Messages
      tags:
        - chat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
              examples: {}
      operationId: getChats
      description: Returns chats from a user
      parameters: []
      security:
        - token: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: New chat
      operationId: makeNewChat
      responses:
        '201':
          description: Created
      parameters:
        - schema:
            type: integer
          in: query
          name: idProduct
          description: Product ID
          required: true
        - schema:
            type: string
          in: query
          name: message
          description: First message
          required: true
      description: Create a chat with another user
      tags:
        - chat
      security:
        - token: []
  '/users/{userId}/chats/{chatId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
      - schema:
          type: string
        name: chatId
        in: path
        required: true
    get:
      summary: Get Messages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
              examples:
                example-1:
                  value:
                    - _id: string
                      chatId: string
                      senderId: string
                      text: string
                      date: '2019-08-24T14:15:22Z'
                      hasRead: true
      operationId: getMessages
      description: Return messages from a chat
      tags:
        - chat
      parameters: []
      security:
        - token: []
    post:
      summary: New message
      operationId: addMessage
      responses:
        '201':
          description: Created
      parameters: []
      description: Add a message to a chat
      tags:
        - chat
      security:
        - token: []
    delete:
      summary: Delete chat
      operationId: deleteChat
      responses:
        '204':
          description: No Content
      description: Hides the chat until both parties delete the chat
      parameters: []
      tags:
        - chat
      security:
        - token: []
  /login:
    parameters: []
    post:
      summary: ''
      operationId: userLogin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  access_token:
                    type: string
                    minLength: 1
                  expires_in:
                    type: integer
                    format: int64
                required:
                  - access_token
                  - expires_in
              examples:
                example-1:
                  value:
                    access_token: yJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MDc0OGJlYjJhNDE5OTJlN
                    expires_in: 1618856387
        '400':
          description: Missing parameters
        '401':
          description: Unauthorized
      description: Returns a temporary access token
      parameters:
        - schema:
            type: string
          in: query
          name: email
          required: true
        - schema:
            type: string
          in: query
          name: password
          required: true
      tags:
        - users
  /confirmation:
    post:
      summary: ''
      operationId: confirmationEmail
      responses:
        '200':
          description: OK
      description: |-
        Used to validate a user's email.
        If the email is not validated you will not be able to create products or send messages.
      security:
        - token: []
      parameters:
        - schema:
            type: string
          in: query
          name: token
          description: Token sent by mail
          required: true
      tags:
        - users
    get:
      summary: ''
      operationId: resendTokenEmail
      responses:
        '200':
          description: OK
      description: Resend message to verify the user
      security:
        - token: []
components:
  schemas:
    User:
      title: User
      type: object
      description: User schema
      x-examples:
        example-1:
          id: 0
          firstName: string
          lastName: string
          email: user@example.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          createDate: '2019-08-24'
          image: 'http://example.com'
          location: string
          lastConectionDate: '2019-08-24T14:15:22Z'
          token: string
          username: string
          password: pa$$word
      properties:
        _id:
          description: Unique identifier for the given user.
          type: string
        firstName:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
          description: Unique identifier for the given user.
        password:
          type: string
          format: password
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
        image:
          type: string
          format: uri
        location:
          type: string
      required:
        - firstName
        - lastName
        - email
        - emailVerified
        - username
        - password
        - _id
    Product:
      title: Product
      type: object
      x-examples:
        example-1:
          id: 0
          idPublisher: 0
          image: 'http://example.com'
          title: string
          specie: string
          size: string
          egg: true
          price: 0
          climate: string
          type: plant
          description: string
      description: Product model
      properties:
        _id:
          type: string
        publisherId:
          type: string
          description: User ID
        image:
          type: string
          format: uri
        title:
          type: string
        specie:
          type: string
        size:
          type: string
        price:
          type: number
        climate:
          type: string
        type:
          type: string
          enum:
            - plant
            - insect
        description:
          type: string
          maxLength: 500
        publishedDate:
          type: string
          format: date
        subspecie:
          type: string
        sold:
          type: boolean
      required:
        - _id
        - publisherId
        - title
        - price
        - type
    Message:
      title: Message
      type: object
      properties:
        _id:
          type: string
        chatId:
          type: string
          description: Chat ID
        senderId:
          type: string
          description: User ID
        text:
          type: string
        date:
          type: string
          format: date-time
        hasRead:
          type: boolean
      required:
        - _id
        - chatId
        - senderId
        - text
        - date
    Chat:
      title: Chat
      type: object
      x-examples:
        example-1:
          _id: string
          productId: string
          sellerId: string
          buyerId: string
          deletedBySeller: true
          deletedByBuyer: true
      properties:
        _id:
          type: string
        productId:
          type: string
          description: Product ID
        sellerId:
          type: string
          description: User ID
        buyerId:
          type: string
          description: User ID
        deletedBySeller:
          type: boolean
        deletedByBuyer:
          type: boolean
      required:
        - _id
        - productId
        - sellerId
        - buyerId
    Token:
      title: Token
      type: object
      description: Token for email validation
      properties:
        _userId:
          $ref: '#/components/schemas/User'
        token:
          type: string
        createdAt:
          type: string
          format: date
  securitySchemes:
    token:
      type: http
      scheme: bearer
security:
  - token: []
