openapi: 3.0.0
info:
  title: backend
  version: '1.0'
  description: API for the backend of the final project.
  contact:
    name: Daniel
    url: 'https://github.com/dm94'
servers:
  - url: 'https://garden-to-yours.herokuapp.com'
    description: Heroku
  - description: Localhost
    url: 'http://localhost:3000'
tags:
  - name: chat
  - name: users
  - name: products
  - name: token
  - name: category
paths:
  /users:
    post:
      summary: addUser
      operationId: addUser
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples: {}
        '400':
          description: Missing Required Information
        '409':
          description: Ese correo ya existe
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                dateOfBirth:
                  type: string
                  format: date
                password:
                  type: string
                  minLength: 12
                lastName:
                  type: string
                  maxLength: 30
                  minLength: 2
                firstName:
                  type: string
                  minLength: 2
                  maxLength: 30
              required:
                - email
                - dateOfBirth
                - password
                - lastName
                - firstName
            examples:
              Create new user:
                value:
                  email: user@example.com
                  dateOfBirth: '2000-08-24'
                  password: asdasd&%$&fsdf5SDF
                  lastName: pepito
                  firstName: geremi
        description: Post the necessary fields for the API to create a new user.
      description: Works - Create a new user.
      tags:
        - users
      parameters: []
    parameters: []
    get:
      summary: getUser
      operationId: getUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      description: Works - Retrieve the information of the user
      tags:
        - users
      security:
        - token: []
    delete:
      summary: deleteUser
      operationId: deleteUser
      responses:
        '204':
          description: User deleted
        '401':
          description: Unauthorized
        '500':
          description: No se ha podido borrar el usuario
      security:
        - token: []
      tags:
        - users
      description: Works - Disable the user
    put:
      summary: updateUser
      operationId: updateUser
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    _id: string
                    firstName: string
                    email: user@example.com
                    username: string
                    password: pa$$word
                    lastName: string
                    dateOfBirth: '2000-08-24T00:00:00.000Z'
                    emailVerified: true
                    createDate: '2019-08-24'
                    image: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '409':
          description: This email already exists
        '500':
          description: Internal Server Error
      description: |-
        Works - Update the information of an existing user.
        action:
        updateimage - To update the image
        updateprofile - To update firstName, lastName and location
        updatedate - To update the date of birth
        updateemail - To update mail
        updatepass - To update the password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 2
                  maxLength: 20
                lastName:
                  type: string
                  minLength: 2
                  maxLength: 20
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                  format: email
                dateOfBirth:
                  type: string
                  format: date
                location:
                  type: string
                image:
                  type: string
                  format: uri
                password:
                  type: string
                  maxLength: 25
                  minLength: 8
            examples:
              updateprofile:
                value:
                  firstName: Pepito
                  lastName: De los palotes
                  location: Talavera de la Reina
              updatedate:
                value:
                  dateOfBirth: '1985-10-02'
              updateimage:
                value:
                  image: 'https://dominio.com/imagen/dasda.jpg'
              updateemail:
                value:
                  email: newemail@hotmail.es
              updatepass:
                value:
                  password: newpassword
        description: Patch user properties to update.
      parameters:
        - schema:
            type: string
            enum:
              - updateimage
              - updateprofile
              - updatedate
              - updateemail
              - updatepass
          in: query
          name: action
          description: We send the action we want to do
          required: true
      tags:
        - users
      security:
        - token: []
  '/users/{username}/profile':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: getUserProfile
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  firstName:
                    type: string
                  location:
                    type: string
                  image:
                    type: string
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
              examples:
                example-1:
                  value:
                    username: string
                    firstName: string
                    location: string
                    image: string
                    products:
                      - _id: string
                        publisherId:
                          _id: string
                          firstName: string
                          email: user@example.com
                          username: string
                          password: pa$$word
                          lastName: string
                          dateOfBirth: '2000-08-24T00:00:00.000Z'
                          emailVerified: true
                          createDate: '2019-08-24'
                          location: string
                          image: string
                        images:
                          - 'http://example.com'
                        title: string
                        size: string
                        price: 0
                        type: plant
                        description: string
                        publishedDate: '2019-08-24'
                        sold: true
                        category:
                          type: plant
                          category: string
                          subcategory: string
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: getUserProfile
      description: Works - Returns the user profile
  /products:
    post:
      summary: addProduct
      operationId: addProduct
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      description: Works - Create a product
      parameters: []
      tags:
        - products
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                publisherId:
                  type: string
                  minLength: 1
                image:
                  type: string
                  minLength: 1
                  format: uri
                title:
                  type: string
                  maxLength: 200
                  minLength: 5
                size:
                  type: string
                price:
                  type: number
                  minimum: 0
                  format: double
                description:
                  type: string
                  maxLength: 500
                  minLength: 2
                type:
                  type: string
                  enum:
                    - insect
                    - plant
                category:
                  type: string
                subcategory:
                  type: string
              required:
                - publisherId
                - image
                - title
                - price
                - description
                - type
            examples:
              example-1:
                value:
                  publisherId: 5345345fdsfg
                  image: 'http://example.com'
                  title: La planta que come
                  price: 20
                  description: Es una planta carnivora
                  type: plant
    get:
      summary: getProducts
      operationId: getProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: |-
        Implemented -Returns a list of products.
        10 products per page
      parameters:
        - schema:
            type: string
            enum:
              - insect
              - plant
          in: query
          name: type
          description: Product Type
        - schema:
            type: integer
          in: query
          name: page
          description: Products page
        - schema:
            type: integer
          in: query
          name: categoryId
          description: Category ID
        - schema:
            type: string
          in: query
          name: title
          description: Tittle
        - schema:
            type: string
            enum:
              - date
              - price
          in: query
          name: orderby
          description: 'Default: date'
        - schema:
            type: string
            enum:
              - desc
              - asc
          in: query
          name: sort
          description: 'Default: desc'
      tags:
        - products
  '/products/{productID}':
    parameters:
      - schema:
          type: string
        name: productID
        in: path
        required: true
        description: Product ID
    get:
      summary: getProduct
      tags:
        - products
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Missing data
        '404':
          description: Product not found
        '500':
          description: Internal Server Error
      operationId: getProduct
      description: Implemented - Returns a product
    put:
      summary: updateProduct
      operationId: updateProduct
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      parameters: []
      description: Implemented - Allows product data to be updated
      tags:
        - products
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            examples:
              example-1:
                value:
                  _id: string
                  publisherId:
                    _id: string
                    firstName: string
                    email: user@example.com
                    username: string
                    password: pa$$word
                    lastName: string
                    dateOfBirth: '2000-08-24T00:00:00.000Z'
                    emailVerified: true
                    createDate: '2019-08-24'
                    location: string
                    image: string
                  images:
                    - 'http://example.com'
                  title: string
                  size: string
                  price: 0
                  type: plant
                  description: string
                  publishedDate: '2019-08-24'
                  sold: true
                  category:
                    type: plant
                    category: string
                    subcategory: string
        description: ''
    delete:
      summary: deleteProduct
      operationId: deleteProduct
      responses:
        '204':
          description: No Content
        '400':
          description: Missing data
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found
        '500':
          description: Product could not be deleted
      description: Implemented - Allows the deletion of a product
      parameters: []
      tags:
        - products
      security:
        - token: []
  /chats:
    get:
      summary: getChats
      tags:
        - chat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
              examples:
                example-1:
                  value:
                    - _id: string
                      productId: string
                      sellerId: string
                      buyerId: string
                      deletedBySeller: true
                      deletedByBuyer: true
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      operationId: getChats
      description: Implemented - Returns chats from a user
      parameters: []
      security:
        - token: []
    parameters: []
    post:
      summary: makeNewChat
      operationId: makeNewChat
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      parameters: []
      description: Implemented - Create a chat with another user
      tags:
        - chat
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                idProduct:
                  type: string
              required:
                - idProduct
  '/chats/{chatId}':
    parameters:
      - schema:
          type: string
        name: chatId
        in: path
        required: true
    get:
      summary: getMessages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
              examples:
                example-1:
                  value:
                    _id: string
                    productId: string
                    sellerId: string
                    buyerId: string
                    deletedBySeller: true
                    deletedByBuyer: true
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: getChat
      description: Implemented - Return a chat
      tags:
        - chat
      parameters: []
      security:
        - token: []
    post:
      summary: addMessage
      operationId: addMessage
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      parameters: []
      description: Implemented - Add a message to a chat
      tags:
        - chat
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
              required:
                - message
    delete:
      summary: deleteChat
      operationId: deleteChat
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Chat could not be deleted
      description: Implemented - Hides the chat until both parties delete the chat
      parameters: []
      tags:
        - chat
      security:
        - token: []
  /login:
    parameters: []
    post:
      summary: userLogin
      operationId: userLogin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
              examples:
                example-1:
                  value:
                    access_token: yJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MDc0OGJlYjJhNDE5OTJlN
                    expires_in: 1618856387
        '400':
          description: Faltan datos
        '401':
          description: Credenciales incorrectas
        '500':
          description: Internal Server Error
      description: Works - Returns a temporary access token
      parameters: []
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
            examples:
              example-1:
                value:
                  email: pepito@gmail.com
                  password: asdasdad
  /confirmation:
    post:
      summary: confirmationEmail
      operationId: confirmationEmail
      responses:
        '200':
          description: The account has been verified
        '400':
          description: Bad Request
        '405':
          description: This user has already been verified
        '500':
          description: Internal Server Error
      description: |-
        Works
        Used to validate a user's email.
        If the email is not validated you will not be able to create products or send messages.
      security:
        - token: []
      parameters: []
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                code:
                  type: string
                  minLength: 1
              required:
                - code
            examples:
              example-1:
                value:
                  code: 0b1a28fb037e58c446f57a6506322e33
    get:
      summary: resendTokenEmail
      operationId: resendTokenEmail
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
      description: Works - Resend message to verify the user
      security:
        - token: []
      tags:
        - users
  /categories:
    get:
      summary: getCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/Category'
              examples:
                example-1:
                  value:
                    - _id: 60883d518a1c16666c8f08bf
                      type: plant
                      category: Cactus
                      __v: 0
                    - _id: 60883d778a1c16666c8f08c0
                      type: plant
                      category: Otra Planta
                      __v: 0
                    - _id: 60883dd68a1c16666c8f08c1
                      type: plant
                      category: Plantas de interior
                      __v: 0
                    - _id: 60883de38a1c16666c8f08c2
                      type: plant
                      category: Plantas de exterior
                      __v: 0
                    - _id: 60883ded8a1c16666c8f08c3
                      type: plant
                      category: Árboles y Arbustos
                      __v: 0
                    - _id: 60883e168a1c16666c8f08c4
                      type: plant
                      category: Plantas de flor
                      subcategory: Semillas
                      __v: 0
                    - _id: 60883e1a8a1c16666c8f08c5
                      type: plant
                      category: Plantas de flor
                      subcategory: Bulbos
                      __v: 0
                    - _id: 60883e298a1c16666c8f08c6
                      type: plant
                      category: Plantas hortícolas
                      subcategory: Semillas
                      __v: 0
                    - _id: 60883e308a1c16666c8f08c7
                      type: plant
                      category: Plantas hortícolas
                      subcategory: Plantulas
                      __v: 0
                    - _id: 60883e3c8a1c16666c8f08c8
                      type: plant
                      category: Cactus y suculentas
                      subcategory: Cactus
                      __v: 0
                    - _id: 60883e438a1c16666c8f08c9
                      type: plant
                      category: Cactus y suculentas
                      subcategory: Suculentas
                      __v: 0
        '500':
          description: Internal Server Error
      operationId: getCategories
      description: Works - Returns a list of categories with different filters
      parameters:
        - schema:
            type: string
            enum:
              - plant
              - insect
          in: query
          name: type
          required: true
      tags:
        - category
    post:
      summary: addCategory
      operationId: addCategory
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '409':
          description: This category already exists
        '500':
          description: Internal Server Error
      description: Works - Add a new category
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - plant
                    - insect
                category:
                  type: string
                subcategory:
                  type: string
              required:
                - type
            examples:
              'Type: Plant -> Category: Cactus':
                value:
                  type: plant
                  category: Cactus
        description: 'This would create such a category: Type: Plant -> Category: Cactus'
      parameters:
        - schema:
            type: string
          in: query
          name: apiKey
          required: true
          description: Token defined on the server to be able to perform administration tasks
      tags:
        - category
      security:
        - token: []
  '/categories/{categoryId}':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    delete:
      summary: deleteCategory
      operationId: deleteCategory
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '500':
          description: Category could not be deleted
      tags:
        - category
      description: Works - Use to delete a category
      parameters:
        - schema:
            type: string
          in: query
          name: apiKey
          description: Token defined on the server to be able to perform administration tasks
          required: true
      security:
        - token: []
    get:
      summary: getCategory
      operationId: getCategory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Works - Get category
      tags:
        - category
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: getUserById
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  firstName:
                    type: string
                  createDate:
                    type: string
                    format: date-time
                  location:
                    type: string
                  image:
                    type: string
                    format: uri
              examples:
                example-1:
                  value:
                    _id: string
                    username: string
                    firstName: string
                    createDate: '2019-08-24T14:15:22Z'
                    location: string
                    image: 'http://example.com'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: getUserById
      description: Works - Returns the user public data
  '/chats/{chatId}/messages':
    parameters:
      - schema:
          type: string
        name: chatId
        in: path
        required: true
    get:
      summary: getMessages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
              examples:
                example-1:
                  value:
                    - _id: string
                      chatId: string
                      senderId: string
                      text: string
                      date: '2019-08-24T14:15:22Z'
                      hasRead: true
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: getMessages
      description: Implemented - Return messages from a chat
      tags:
        - chat
      parameters: []
      security:
        - token: []
components:
  schemas:
    User:
      title: User
      type: object
      description: User schema
      x-examples:
        example-1:
          _id: string
          firstName: string
          email: user@example.com
          username: string
          password: pa$$word
          lastName: string
          dateOfBirth: '1997-10-31'
          emailVerified: true
          createDate: '2019-08-24'
          image:
            _id: string
            url: 'http://example.com'
          location: string
      properties:
        _id:
          description: Unique identifier for the given user.
          type: string
        firstName:
          type: string
          minLength: 2
          maxLength: 30
        email:
          type: string
          format: email
        username:
          type: string
          description: Unique identifier for the given user.
        password:
          type: string
          format: password
        lastName:
          type: string
          minLength: 2
          maxLength: 30
        dateOfBirth:
          type: string
          format: date-time
          example: '2000-08-24T00:00:00.000Z'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
        location:
          type: string
        image:
          type: string
      required:
        - _id
        - firstName
        - email
        - username
        - password
        - lastName
        - dateOfBirth
    Product:
      title: Product
      type: object
      x-examples:
        example-1:
          id: 0
          idPublisher: 0
          image: 'http://example.com'
          title: string
          specie: string
          size: string
          egg: true
          price: 0
          climate: string
          type: plant
          description: string
        example-2:
          _id: string
          publisherId:
            _id: string
            firstName: string
            email: user@example.com
            username: string
            password: pa$$word
            lastName: string
            dateOfBirth: '1997-10-31'
            emailVerified: true
            createDate: '2019-08-24'
            image:
              _id: string
              url: 'http://example.com'
            location: string
          images:
            - _id: string
              url: 'http://example.com'
          title: string
          size: string
          price: 0
          climate: string
          type: plant
          description: string
          publishedDate: '2019-08-24'
          sold: true
          category:
            type: plant
            category: string
            subcategory: string
      description: Product model
      properties:
        _id:
          type: string
        publisherId:
          $ref: '#/components/schemas/User'
        images:
          format: uri
          type: array
          items:
            type: string
            format: uri
        title:
          type: string
        size:
          type: string
        price:
          type: number
        type:
          type: string
          enum:
            - plant
            - insect
        description:
          type: string
          maxLength: 500
        publishedDate:
          type: string
          format: date
        sold:
          type: boolean
        category:
          $ref: '#/components/schemas/Category'
      required:
        - _id
        - publisherId
        - title
        - price
        - type
    Message:
      title: Message
      type: object
      properties:
        _id:
          type: string
        chatId:
          type: string
          description: Chat ID
        senderId:
          type: string
          description: User ID
        text:
          type: string
        date:
          type: string
          format: date-time
        hasRead:
          type: boolean
      required:
        - _id
        - chatId
        - senderId
        - text
        - date
    Chat:
      title: Chat
      type: object
      x-examples:
        example-1:
          _id: string
          productId: string
          sellerId: string
          buyerId: string
          deletedBySeller: true
          deletedByBuyer: true
      properties:
        _id:
          type: string
        productId:
          type: string
          description: Product ID
        sellerId:
          type: string
          description: User ID
        buyerId:
          type: string
          description: User ID
        deletedBySeller:
          type: boolean
        deletedByBuyer:
          type: boolean
      required:
        - _id
        - productId
        - sellerId
        - buyerId
    Token:
      description: ''
      type: object
      properties:
        access_token:
          type: string
          minLength: 1
        expires_in:
          type: number
      required:
        - access_token
        - expires_in
      x-examples:
        example-1:
          access_token: yJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MDc0OGJlYjJhNDE5OTJlN
          expires_in: 1618856387
    Category:
      title: Category
      type: object
      properties:
        type:
          type: string
          enum:
            - plant
            - insect
        category:
          type: string
          minLength: 2
          maxLength: 20
        subcategory:
          type: string
          minLength: 2
          maxLength: 20
      required:
        - type
        - category
      x-examples:
        example-1:
          type: plant
          category: string
          subcategory: string
  securitySchemes:
    token:
      type: http
      scheme: bearer
  responses: {}
  parameters: {}
security:
  - token: []
